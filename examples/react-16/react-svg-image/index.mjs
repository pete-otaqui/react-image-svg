var h=(e=>(e.PNG="png",e.JPEG="jpeg",e.WEBP="webp",e))(h||{}),w=(n=>(n.DATA_URL="data_url",n.BLOB="blob",n))(w||{}),p="data-react-svg-image-injector-container",d;function T(t){d=t}async function x(t,{format:r="png",injectSelector:n="body",output:e="data_url",scale:o=1,quality:i=.97,throwErrors:s=!0,ignoreAllSelectors:c=[]}={}){try{if(!d)throw new Error("You must call setDomRenderer before calling renderSvgAsImage");let l=S(),a=document.querySelector(n);if(!a)throw new Error(`Could not find element with selector ${a}`);if(!Object.values(h).includes(r))throw new Error(`Invalid image format ${r}`);if(!Object.values(w).includes(e))throw new Error(`Invalid image output ${e}`);let g=y(a,l);try{await d(t,g)}catch(b){throw u(a,l),console.error("Failed to render element"),b}let m=g.querySelector("svg");if(!m)throw u(a,l),new Error("Could not find a rendered SVG");C(m,c);let f=await A(m,o),v=I(f,e,r,i);return u(a,l),v}catch(l){if(s)throw l;return console.error(l),""}}function y(t,r){let n=document.createElement("div");return n.setAttribute("data-react-svg-image-injector-container",r),n.style.visibility="hidden",n.style.position="absolute",n.style.top="0",n.style.left="0",t.appendChild(n),n}function u(t,r){let n=t.querySelector(`[${p}="${r}"]`);n?t.removeChild(n):console.error(`Could not find injector container with id ${r}`)}function S(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,t=>(t^crypto.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16))}function C(t,r){r.forEach(n=>{var o;let e=t.querySelectorAll(n);for(let i=0;i<e.length;i++)(o=e[i].parentNode)==null||o.removeChild(e[i])}),E(t,t)}function E(t,r){let n=window.getComputedStyle(t);for(let e of n)e!=="visibility"&&(r.style[e]=n[e]);for(let e=0;e<t.children.length;e++)E(t.children[e],r.children[e])}function A(t,r){let n=new XMLSerializer().serializeToString(t),e=document.createElement("canvas"),o=t.getBoundingClientRect();e.width=o.width*r,e.height=o.height*r,e.style.width=`${o.width}px`,e.style.height=`${o.height}px`;let i=e.getContext("2d");if(!i)throw new Error("Could not get canvas context");i.scale(r,r);let s=document.createElement("img");return s.setAttribute("src","data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(n)))),new Promise(c=>{s.onload=()=>{if(!i)throw new Error("Could not get canvas context");i.drawImage(s,0,0),c(e)}})}async function I(t,r,n,e){if(r==="data_url")return R(t,n,e);{let o=await P(t,n,e);if(!o)throw new Error("Could not convert canvas to blob");return o}}function R(t,r,n){return t.toDataURL(`image/${r}`,n)}function P(t,r,n){return new Promise(e=>{t.toBlob(o=>e(o),`image/${r}`,n)})}export{h as ImageFormat,w as ImageOutput,x as renderSvgAsImage,T as setDomRenderer};
//# sourceMappingURL=index.mjs.map